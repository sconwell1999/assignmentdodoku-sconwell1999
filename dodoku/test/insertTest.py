from unittest import TestCase
import dodoku.insert as insert

class InsertTest(TestCase):
    def test_Insert_010_InsertValueMiddleSection(self):
        expectedResult = {'grid': [0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,
                                   -3,0,0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,
                                   -7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,3,0,-1,-4,
                                   0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,
                                   -7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6,0,0,0,0,-9,0,-2,0,0,
                                   0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,
                                   0,-4,0,0,-6,0,-3,-9,0,0,0,-6,0,0,-5,0,0,-3,-1]
                                   ,'integrity': 'd5f78945','status':'ok'}
        parms = {'op':'insert','value':'3','cell':'r7c9',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'2ab5f3e8'}
        actualResult = insert._insert(parms)
        self.assertListEqual(expectedResult['grid'], actualResult['grid'])
        
    def test_Insert_020_InsertValueFirstSection(self):
        expectedResult = {'grid': [0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,
                        0,-1,4,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]}
        parms = {'op':'insert','value':'4','cell':'r3c9',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'2ab5f3e8'}
        actualResult = insert._insert(parms)
        self.assertListEqual(expectedResult['grid'], actualResult['grid'])
        
    def test_Insert_030_InsertValueThirdSection(self):
        expectedResult = {'grid': [0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,
                        -9,4,0,0,-6,0,0,-5,0,0,-3,-1]}
        parms = {'op':'insert','value':'4','cell':'r14c14',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'2ab5f3e8'}
        actualResult = insert._insert(parms)
        self.assertListEqual(expectedResult['grid'], actualResult['grid'])
    
    def test_Insert_040_InvalidIntegrity(self):
        expectedResult = {'status':'error: Integrity mismatch'}
        parms = {'op':'insert','value':'4','cell':'r14c14',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'aaaaaaa'}
        actualResult = insert._insert(parms)
        self.assertDictEqual(expectedResult, actualResult)
        
    def test_Insert_050_InvalidCell(self):
        expectedResult = {'status':'error: Invalid cell'}
        parms = {'op':'insert','value':'4','cell':'r10c5',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'2ab5f3e8'}
        actualResult = insert._insert(parms)
        self.assertDictEqual(expectedResult, actualResult)
        
    def test_Insert_060_InvalidCellFirstSetofRows(self):
        expectedResult = {'status':'error: Invalid cell'}
        parms = {'op':'insert','value':'4','cell':'r1c11',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'2ab5f3e8'}
        actualResult = insert._insert(parms)
        self.assertDictEqual(expectedResult, actualResult)
        
    def test_Insert_070_ValueWarning(self):
        expectedResult = {'grid': [0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,\
                                    0,0,0,-3,0,0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,\
                                    -9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,\
                                    0,0,0,0,5,0,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,\
                                    -2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,\
                                    -5,0,0,-6,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,\
                                    0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,\
                                    -3,-9,0,0,0,-6,0,0,-5,0,0,-3,-1],
                                    'integrity': 'ea6d2f05','status':'warning'}

        parms = {'op':'insert','value':'5','cell':'r7c9',
                 'grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,-5,0,0,0,0,-3,0,\
                        0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0\
                        ,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,-9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6\
                        ,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,-8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,\
                        -9,0,0,0,-6,0,0,-5,0,0,-3,-1]', 'integrity':'2ab5f3e8'}
        actualResult = insert._insert(parms)
        self.assertEqual(expectedResult['status'], actualResult['status'])
        
    def test_Insert_080_ImmutableCell(self):
        parms = {'value':'1','cell':'r1c2','grid':'[0,-2,0,0,-1,0,0,-4,0,-8,0,-1,-9,0,0,0,0,\
                -5,0,0,0,0,-3,0,0,-1,0,0,-3,0,0,0,0,-4,0,-6,-5,0,-9,0,0,0,0,0,-7,0,0,0,0,0,\
                0,-2,-8,0,-2,0,0,-6,0,0,0,0,0,0,-1,-4,0,-6,0,0,0,-6,0,0,-3,0,0,0,-2,0,0,-1,0,\
                -9,0,-4,0,-5,-7,0,0,0,0,0,0,-7,0,0,-5,0,0,-6,0,0,0,0,-9,0,-2,0,0,0,0,0,-4,0,\
                -8,-7,0,-9,0,0,0,0,0,0,0,-5,0,0,-9,0,0,0,0,-4,0,0,-6,0,-3,-9,0,0,0,-6,0,0,-5,\
                0,0,-3,-1]','integrity':'2ab5f3e8'}
        expectedResult = {'status': 'error: Immutable cell'}
        actualResult = insert._insert(parms)
        self.assertEqual(expectedResult['status'], actualResult['status'])
        
    